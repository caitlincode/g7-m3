# docker-compose.yml notes
# Defines services: It specifies both the frontend and backend as separate services, each with its own container built from their respective Dockerfile.
# Links containers: It allows communication between the frontend and backend containers, typically through a defined network.
# Simplifies deployment: By running docker-compose up, it automatically builds and starts both the frontend and backend containers together,
# ensuring they are correctly configured and run in parallel.

# build: context specifies the directory containing the Dockerfile for each service.
# ports: It maps the container ports to the host machine ports, allowing access to the services from the host machine.
# volumes: It mounts the local project directories to the container directories, allowing live code changes to be reflected in the containers.
# volumes are a way to maintain data generated by the container even after the container is stopped or removed.
# they allow you to share data between the host and the container, and between containers by sharing data volumes.

# The node_modules directory inside the container is isolated from the host machine. This prevents any potential conflicts between the dependencies installed on the host and those inside the container.
# The dependencies installed inside the container will be stored in this anonymous volume, ensuring that they persist across container restarts.

services:
  backend:
    build: ./backend
    container_name: mock-interview-backend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
    networks:
      - app-network

  frontend:
    build: ./frontend
    container_name: mock-interview-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
